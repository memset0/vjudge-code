// luogu-judger-enable-o2
#include <bits/stdc++.h>#define il inline#define rg register#define getc getchar#define putc putchar#define ll long long#define rep(i, l, r) for (register int i = l; i <= r; ++i)namespace ringo {	template < class T > il void read(T &x) {	x = 0; rg char c = getc(); rg bool f = 0;	while (!isdigit(c)) f ^= c == '-', c = getc();	while (isdigit(c)) x = x * 10 + c - '0', c = getc();	if (f) x = -x;}template < class T > il void print(T x) {	if (x < 0) putc('-'), x = -x;	if (x > 9) print(x / 10);	putc(x % 10 + '0');}const int maxn = 50010, maxm = maxn * 100;int n, m, a, b, l, r, rt, op, pos;int lc[maxm], rc[maxm], fa[maxm], fb[maxm], fx[maxm], fy[maxm];ll sum[maxm]; bool tag[maxm];il ll calc(int a, int b, int l, int r) {	if (b == 1) return 0;	if (a == 1 && r < b) return 1ll * (l + r) * (r - l + 1) / 2;	ll ret = 0; rep(i, l, r) ret += 1ll * i * a % b; return ret;}il void pushup(int &u, int a, int b, int x, int y, int ql, int qr) {	if (!u) u = ++pos;	fa[u] = a, fb[u] = b, fx[u] = x, fy[u] = y;	tag[u] = 1, sum[u] = calc(a, b, x, y);}il void pushdown(int u, int ql, int qr) {	if (tag[u]) {		if (ql != qr) {			int mid = (ql + qr) >> 1;			pushup(lc[u], fa[u], fb[u], fx[u], fx[u] + mid - ql, ql, mid);			pushup(rc[u], fa[u], fb[u], fx[u] + mid - ql + 1, fy[u], mid + 1, qr);		}		tag[u] = 0;	}}void modify(int &u, int a, int b, int x, int y, int l, int r, int ql, int qr) {	if (!u) u = ++pos;	pushdown(u, ql, qr);	if (l == ql && r == qr) {		pushup(u, a, b, x, y, ql, qr);		return;	}	int mid = (ql + qr) >> 1;	if (r <= mid) modify(lc[u], a, b, x, y, l, r, ql, mid);	else if (l > mid) modify(rc[u], a, b, x, y, l, r, mid + 1, qr);	else {		modify(lc[u], a, b, x, mid - l + x, l, mid, ql, mid);		modify(rc[u], a, b, mid - l + x + 1, y, mid + 1, r, mid + 1, qr);	}	sum[u] = sum[lc[u]] + sum[rc[u]];}ll query(int u, int l, int r, int ql, int qr) {	if (!u) return 0;	pushdown(u, ql, qr);	if (ql == l && qr == r) return sum[u];	int mid = (ql + qr) >> 1;	if (r <= mid) return query(lc[u], l, r, ql, mid);	else if (l > mid) return query(rc[u], l, r, mid + 1, qr);	else return query(lc[u], l, mid, ql, mid) +		query(rc[u], mid + 1, r, mid + 1, qr);}void main() {//	freopen("small.in", "r", stdin);//	freopen("small.out", "w", stdout);//	freopen("3.txt", "r", stdin);//	freopen("1.txt", "w", stdout);	read(n), read(m);	for (int i = 1; i <= m; i++) {		read(op), read(l), read(r);//		printf(">> %d %d %d\n", op, l, r);		if (op == 1) read(a), read(b), modify(rt, a, b, 1, r - l + 1, l, r, 1, n);		else print(query(rt, l, r, 1, n)), putc('\n');	}}} int main() { return ringo::main(), 0; }