// luogu-judger-enable-o2
// ==============================//  author: memset0//  website: https://memset0.cn// ==============================#include <bits/stdc++.h>#define ll long long#define rep(i,l,r) for (int i = l; i <= r; i++)#define getc(x) getchar(x)#define putc(x) putchar(x)template <typename T> inline void read(T &x) {	x = 0; register char ch; register bool fl = 0;	while (ch = getc(), ch < 48 || 57 < ch) fl ^= ch == '-'; x = (ch & 15);	while (ch = getc(), 47 < ch && ch < 58) x = (x << 1) + (x << 3) + (ch & 15);	if (fl) x = -x;}template <typename T> inline void readc(T &x) {	while (x = getc(), !islower(x) && !isupper(x));}template <typename T> inline void print(T x, char c = ' ') {	static int buf[40];	if (x == 0) { putc('0'); putc(c); return; }	if (x < 0) putc('-'), x = -x;	for (buf[0] = 0; x; x /= 10) buf[++buf[0]] = x % 10 + 48;	while (buf[0]) putc((char) buf[buf[0]--]);	putc(c);}const int maxn = 610, maxm = 360010;const int mov[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};int n, l, r, ux, uy, vx, vy, flag;int a[maxn][maxn];bool vis[maxn][maxn];int qx[maxm], qy[maxm];char ch;struct node {	int x, y;} now;std::queue < node > c[2];bool bfs(int x, int y) {	bool flag = true;	l = r = 1, qx[1] = x, qy[1] = y, vis[x][y] = 1;//	printf("bfs %d %d\n", x, y);	while (l <= r) {		ux = qx[l], uy = qy[l], ++l;		for (int i = 0; i < 4; i++) {			vx = ux + mov[i][0];			vy = uy + mov[i][1];			if (vx < 1 || vy < 1 || vx > n || vy > n)				continue;			if (a[vx][vy] == (a[ux][uy] ^ 1))				continue;			if (vis[vx][vy])				continue;			if (a[vx][vy] == -1) {//				printf(">> out from %d %d %d %d\n", ux, uy, vx, vy);				flag = false;				continue;			}			vis[vx][vy] = 1;			++r, qx[r] = vx, qy[r] = vy;		}	}	return flag;}bool check(int x, int y, int c) {	if (~a[x][y]) return false;//	printf("check %d %d %d\n", x, y, c);	memset(vis, 0, sizeof(vis));	a[x][y] = c;	bool flag = false;//	for (int i = 1; i <= n; i++) {//		for (int j = 1; j <= n; j++)//			print(a[i][j]);//		putc('\n');//	}	for (int i = 1; i <= n; i++)		for (int j = 1; j <= n; j++)			if (~a[i][j] && !vis[i][j]) {				flag |= bfs(i, j);				if (flag) {					a[x][y] = -1;					return false;				}			}	a[x][y] = -1;	return true;}int main() {//	freopen("in", "r", stdin);		read(n);	for (int i = 1; i <= n; i++)		for (int j = 1; j <= n; j++) {			while (ch = getc(), ch != '.' && ch != 'X' && ch != 'O');//			printf("%c\n", ch);			switch (ch) {				case 'X':					a[i][j] = 0;					break;				case 'O':					a[i][j] = 1;					break;				case '.':					a[i][j] = -1;					c[0].push((node){i, j});					c[1].push((node){i, j});					break;			}		}	for (int i = 0; true; i ^= 1) {		flag = 0;//		printf(">>> %d\n", i);		while (c[i].size()) {			now = c[i].front(), c[i].pop();;			if (check(now.x, now.y, i)) {				print(now.x), print(now.y, '\n');				a[now.x][now.y] = i;				flag = 1;				break;			}		}		if (!flag) {			puts("-1 -1");			return 0;		}	}	return 0;}